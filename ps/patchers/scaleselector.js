/**
 * Functions that max expects to be present when the file is loaded
 */

/**
 * Registered message handlers
 *
 * @see anything
 */
var messageHandlers = {};

/**
 * Respond to messages
 *
 * Max expects <code>anything</code> to be present when the JavaScript is
 * loaded. We <i>can</i> override it later, but since it must be present, we
 * might as well make use of it. On the PureScript side, we will update
 * <code>messageHandlers</code>, and we will read it here.
 */
function anything() {
  if(messageHandlers[inlet] !== undefined && typeof(messageHandlers[inlet][messagename]) === 'function') {
    messageHandlers[inlet][messagename](arguments);
  } else {
    throw ("anything: Unexpected message " + messagename + " on inlet " + inlet + "\n");
  }
}
// Generated by purs bundle 0.14.0
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var Cardinality = function (x) {
      return x;
  };
  exports["Cardinality"] = Cardinality;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Generic.Rep"] = $PS["Data.Generic.Rep"] || {};
  var exports = $PS["Data.Generic.Rep"];             
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var Constructor = function (x) {
      return x;
  };
  var to = function (dict) {
      return dict.to;
  };
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Constructor"] = Constructor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Enum.Generic"] = $PS["Data.Enum.Generic"] || {};
  var exports = $PS["Data.Enum.Generic"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var GenericBoundedEnum = function (genericCardinality$prime, genericFromEnum$prime, genericToEnum$prime) {
      this["genericCardinality'"] = genericCardinality$prime;
      this["genericFromEnum'"] = genericFromEnum$prime;
      this["genericToEnum'"] = genericToEnum$prime;
  };
  var genericToEnum$prime = function (dict) {
      return dict["genericToEnum'"];
  };
  var genericToEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $90 = Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.to(dictGeneric));
          var $91 = genericToEnum$prime(dictGenericBoundedEnum);
          return function ($92) {
              return $90($91($92));
          };
      };
  };
  var genericFromEnum$prime = function (dict) {
      return dict["genericFromEnum'"];
  };
  var genericFromEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $101 = genericFromEnum$prime(dictGenericBoundedEnum);
          var $102 = Data_Generic_Rep.from(dictGeneric);
          return function ($103) {
              return $101($102($103));
          };
      };
  };
  var genericCardinality$prime = function (dict) {
      return dict["genericCardinality'"];
  };
  var genericBoundedEnumSum = function (dictGenericBoundedEnum) {
      return function (dictGenericBoundedEnum1) {
          return new GenericBoundedEnum(Data_Enum.Cardinality(Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum1)) | 0), function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericFromEnum$prime(dictGenericBoundedEnum)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericFromEnum$prime(dictGenericBoundedEnum1)(v.value0) + Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)) | 0;
              };
              throw new Error("Failed pattern match at Data.Enum.Generic (line 87, column 22 - line 89, column 80): " + [ v.constructor.name ]);
          }, function (n) {
              var to = function (v) {
                  if (n >= 0 && n < v) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inl.create)(genericToEnum$prime(dictGenericBoundedEnum)(n));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Inr.create)(genericToEnum$prime(dictGenericBoundedEnum1)(n - v | 0));
                  };
                  throw new Error("Failed pattern match at Data.Enum.Generic (line 83, column 5 - line 83, column 43): " + [ v.constructor.name ]);
              };
              return to(genericCardinality$prime(dictGenericBoundedEnum));
          });
      };
  };
  var genericBoundedEnumNoArguments = new GenericBoundedEnum(1, function (v) {
      return 0;
  }, function (i) {
      var $87 = i === 0;
      if ($87) {
          return new Data_Maybe.Just(Data_Generic_Rep.NoArguments.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var genericBoundedEnumConstructor = function (dictGenericBoundedEnum) {
      return new GenericBoundedEnum(Data_Newtype.unwrap()(genericCardinality$prime(dictGenericBoundedEnum)), function (v) {
          return genericFromEnum$prime(dictGenericBoundedEnum)(v);
      }, function (i) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Generic_Rep.Constructor)(genericToEnum$prime(dictGenericBoundedEnum)(i));
      });
  };
  exports["genericToEnum"] = genericToEnum;
  exports["genericFromEnum"] = genericFromEnum;
  exports["genericBoundedEnumNoArguments"] = genericBoundedEnumNoArguments;
  exports["genericBoundedEnumConstructor"] = genericBoundedEnumConstructor;
  exports["genericBoundedEnumSum"] = genericBoundedEnumSum;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS);
(function(exports) {
  exports.fromMaxIntImpl = function(x) {
    if(typeof(x) === 'number') {
      return x;
    } else {
      throw ( "fromMaxIntImpl: Argument "
            + x
            + " has unexpected type "
            + typeof(x)
            + " (expected Int)\n"
            );
    }
  }

  exports.maxError = function(err) {
     error(err, "\n");
     return null;
  }
})(PS["MaxForLive.Conversions"] = PS["MaxForLive.Conversions"] || {});
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["MaxForLive.Conversions"] = $PS["MaxForLive.Conversions"] || {};
  var exports = $PS["MaxForLive.Conversions"];
  var $foreign = $PS["MaxForLive.Conversions"];
  var Data_Array = $PS["Data.Array"];
  var Data_Enum_Generic = $PS["Data.Enum.Generic"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var SimpleEnum = function (fromSimpleEnum, toSimpleEnum) {
      this.fromSimpleEnum = fromSimpleEnum;
      this.toSimpleEnum = toSimpleEnum;
  };
  var ToMax = function (toMax) {
      this.toMax = toMax;
  };
  var FromMax = function (fromMax) {
      this.fromMax = fromMax;
  };
  var toSimpleEnum = function (dict) {
      return dict.toSimpleEnum;
  };                                                                                    
  var toMaxInt = new ToMax(Unsafe_Coerce.unsafeCoerce);
  var toMax = function (dict) {
      return dict.toMax;
  };
  var toMaxArray = function (dictToMax) {
      return new ToMax((function () {
          var $15 = Data_Functor.map(Data_Functor.functorArray)(toMax(dictToMax));
          return function ($16) {
              return $15($16);
          };
      })());
  };    
  var toMaxList = function (dictToMax) {
      return new ToMax((function () {
          var $19 = toMax(toMaxArray(dictToMax));
          var $20 = Data_Array.fromFoldable(Data_List_Types.foldableList);
          return function ($21) {
              return $19($20($21));
          };
      })());
  };
  var maxFromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.maxError("maxFromJust");
      };
      throw new Error("Failed pattern match at MaxForLive.Conversions (line 133, column 1 - line 133, column 38): " + [ v.constructor.name ]);
  };
  var genericToSimpleEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          var $22 = Data_Enum_Generic.genericToEnum(dictGeneric)(dictGenericBoundedEnum);
          return function ($23) {
              return maxFromJust($22($23));
          };
      };
  };
  var genericFromSimpleEnum = function (dictGeneric) {
      return function (dictGenericBoundedEnum) {
          return Data_Enum_Generic.genericFromEnum(dictGeneric)(dictGenericBoundedEnum);
      };
  };
  var fromSimpleEnum = function (dict) {
      return dict.fromSimpleEnum;
  };
  var maxFromEnum = function (dictSimpleEnum) {
      var $24 = toMax(toMaxInt);
      var $25 = fromSimpleEnum(dictSimpleEnum);
      return function ($26) {
          return $24($25($26));
      };
  };                                                          
  var fromMaxInt = new FromMax($foreign.fromMaxIntImpl);
  var fromMax = function (dict) {
      return dict.fromMax;
  };    
  var maxToEnum = function (dictSimpleEnum) {
      var $29 = toSimpleEnum(dictSimpleEnum);
      var $30 = fromMax(fromMaxInt);
      return function ($31) {
          return $29($30($31));
      };
  };
  exports["FromMax"] = FromMax;
  exports["fromMax"] = fromMax;
  exports["ToMax"] = ToMax;
  exports["toMax"] = toMax;
  exports["SimpleEnum"] = SimpleEnum;
  exports["toSimpleEnum"] = toSimpleEnum;
  exports["fromSimpleEnum"] = fromSimpleEnum;
  exports["genericToSimpleEnum"] = genericToSimpleEnum;
  exports["genericFromSimpleEnum"] = genericFromSimpleEnum;
  exports["maxFromEnum"] = maxFromEnum;
  exports["maxToEnum"] = maxToEnum;
  exports["toMaxList"] = toMaxList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Backend.Note"] = $PS["Backend.Note"] || {};
  var exports = $PS["Backend.Note"];
  var Data_Enum_Generic = $PS["Data.Enum.Generic"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_List_Types = $PS["Data.List.Types"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var C = (function () {
      function C() {

      };
      C.value = new C();
      return C;
  })();
  var Cs = (function () {
      function Cs() {

      };
      Cs.value = new Cs();
      return Cs;
  })();
  var D = (function () {
      function D() {

      };
      D.value = new D();
      return D;
  })();
  var Ds = (function () {
      function Ds() {

      };
      Ds.value = new Ds();
      return Ds;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var F = (function () {
      function F() {

      };
      F.value = new F();
      return F;
  })();
  var Fs = (function () {
      function Fs() {

      };
      Fs.value = new Fs();
      return Fs;
  })();
  var G = (function () {
      function G() {

      };
      G.value = new G();
      return G;
  })();
  var Gs = (function () {
      function Gs() {

      };
      Gs.value = new Gs();
      return Gs;
  })();
  var A = (function () {
      function A() {

      };
      A.value = new A();
      return A;
  })();
  var As = (function () {
      function As() {

      };
      As.value = new As();
      return As;
  })();
  var B = (function () {
      function B() {

      };
      B.value = new B();
      return B;
  })();
  var genericNote = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof C) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Cs) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof D) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof Ds) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof E) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof F) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof Fs) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
      };
      if (x instanceof G) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
      };
      if (x instanceof Gs) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
      };
      if (x instanceof A) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
      };
      if (x instanceof As) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      if (x instanceof B) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      throw new Error("Failed pattern match at Backend.Note (line 27, column 1 - line 27, column 46): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return C.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return Cs.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return D.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return Ds.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return E.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return F.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return Fs.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return G.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return Gs.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
          return A.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
          return As.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))) {
          return B.value;
      };
      throw new Error("Failed pattern match at Backend.Note (line 27, column 1 - line 27, column 46): " + [ x.constructor.name ]);
  });              
  var simpleEnumNote = new MaxForLive_Conversions.SimpleEnum(MaxForLive_Conversions.genericFromSimpleEnum(genericNote)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))))))))))), MaxForLive_Conversions.genericToSimpleEnum(genericNote)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))))))))))));
  var simpleEnumInOctave = new MaxForLive_Conversions.SimpleEnum(function (v) {
      return (v.octave * 12 | 0) + MaxForLive_Conversions.fromSimpleEnum(simpleEnumNote)(v.note) | 0;
  }, function (i) {
      return {
          octave: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(i)(12),
          note: MaxForLive_Conversions.toSimpleEnum(simpleEnumNote)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(i)(12))
      };
  });
  var toMaxInOctave = new MaxForLive_Conversions.ToMax(MaxForLive_Conversions.maxFromEnum(simpleEnumInOctave));
  var transposeBy = function (n) {
      var $125 = MaxForLive_Conversions.toSimpleEnum(simpleEnumInOctave);
      var $126 = MaxForLive_Conversions.fromSimpleEnum(simpleEnumInOctave);
      return function ($127) {
          return $125((function (v) {
              return v + n | 0;
          })($126($127)));
      };
  };
  var monotonic = (function () {
      var go = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return Data_List_Types.Nil.value;
              };
              if (v1 instanceof Data_List_Types.Cons) {
                  var n = MaxForLive_Conversions.fromSimpleEnum(simpleEnumInOctave)(v1.value0);
                  var $107 = n > v;
                  if ($107) {
                      return new Data_List_Types.Cons(v1.value0, go(n)(v1.value1));
                  };
                  var t = (1 + Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - n | 0)(12) | 0) * 12 | 0;
                  return new Data_List_Types.Cons(transposeBy(t)(v1.value0), go(n + t | 0)(v1.value1));
              };
              throw new Error("Failed pattern match at Backend.Note (line 83, column 5 - line 83, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      return go(-1 | 0);
  })();                                                                                                  
  var fromMaxInOctave = new MaxForLive_Conversions.FromMax(MaxForLive_Conversions.maxToEnum(simpleEnumInOctave));
  var distance = function (a) {
      return function (b) {
          return MaxForLive_Conversions.fromSimpleEnum(simpleEnumInOctave)(a) - MaxForLive_Conversions.fromSimpleEnum(simpleEnumInOctave)(b) | 0;
      };
  };
  var startWith = function (v) {
      return function (v1) {
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
          };
          if (v1 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_List_Types.functorList)(transposeBy(distance(v)(v1.value0)))(new Data_List_Types.Cons(v1.value0, v1.value1));
          };
          throw new Error("Failed pattern match at Backend.Note (line 95, column 1 - line 95, column 56): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  exports["C"] = C;
  exports["D"] = D;
  exports["Ds"] = Ds;
  exports["E"] = E;
  exports["F"] = F;
  exports["Fs"] = Fs;
  exports["G"] = G;
  exports["A"] = A;
  exports["As"] = As;
  exports["monotonic"] = monotonic;
  exports["startWith"] = startWith;
  exports["fromMaxInOctave"] = fromMaxInOctave;
  exports["toMaxInOctave"] = toMaxInOctave;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Backend.Scale"] = $PS["Backend.Scale"] || {};
  var exports = $PS["Backend.Scale"];
  var Backend_Note = $PS["Backend.Note"];
  var Data_Enum_Generic = $PS["Data.Enum.Generic"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Generic_Rep = $PS["Data.Generic.Rep"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var Kurd9 = (function () {
      function Kurd9() {

      };
      Kurd9.value = new Kurd9();
      return Kurd9;
  })();
  var Hijaz = (function () {
      function Hijaz() {

      };
      Hijaz.value = new Hijaz();
      return Hijaz;
  })();
  var Pelog = (function () {
      function Pelog() {

      };
      Pelog.value = new Pelog();
      return Pelog;
  })();
  var Integral = (function () {
      function Integral() {

      };
      Integral.value = new Integral();
      return Integral;
  })();
  var scaleNotes = function (v) {
      if (v instanceof Kurd9) {
          return [ Backend_Note.A.value, Backend_Note.As.value, Backend_Note.C.value, Backend_Note.D.value, Backend_Note.E.value, Backend_Note.F.value, Backend_Note.G.value, Backend_Note.A.value, Backend_Note.C.value ];
      };
      if (v instanceof Hijaz) {
          return [ Backend_Note.D.value, Backend_Note.Ds.value, Backend_Note.Fs.value, Backend_Note.G.value, Backend_Note.A.value, Backend_Note.As.value, Backend_Note.C.value, Backend_Note.D.value ];
      };
      if (v instanceof Pelog) {
          return [ Backend_Note.A.value, Backend_Note.As.value, Backend_Note.C.value, Backend_Note.E.value, Backend_Note.F.value, Backend_Note.A.value, Backend_Note.As.value, Backend_Note.C.value ];
      };
      if (v instanceof Integral) {
          return [ Backend_Note.A.value, Backend_Note.As.value, Backend_Note.C.value, Backend_Note.D.value, Backend_Note.E.value, Backend_Note.F.value, Backend_Note.A.value ];
      };
      throw new Error("Failed pattern match at Backend.Scale (line 92, column 1 - line 92, column 34): " + [ v.constructor.name ]);
  };
  var renderSpec = function (v) {
      var render = (function () {
          var $19 = Backend_Note.startWith(v.root);
          var $20 = Data_Functor.map(Data_List_Types.functorList)(function (n) {
              return {
                  octave: 0,
                  note: n
              };
          });
          var $21 = Data_List.fromFoldable(Data_Foldable.foldableArray);
          return function ($22) {
              return $19(Backend_Note.monotonic($20($21($22))));
          };
      })();
      return new Data_List_Types.Cons(v.doum, render(scaleNotes(v.scale)));
  };
  var genericScale = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Kurd9) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Hijaz) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof Pelog) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof Integral) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Backend.Scale (line 74, column 1 - line 74, column 48): " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Kurd9.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return Hijaz.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return Pelog.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return Integral.value;
      };
      throw new Error("Failed pattern match at Backend.Scale (line 74, column 1 - line 74, column 48): " + [ x.constructor.name ]);
  });      
  var simpleEnumScale = new MaxForLive_Conversions.SimpleEnum(MaxForLive_Conversions.genericFromSimpleEnum(genericScale)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))), MaxForLive_Conversions.genericToSimpleEnum(genericScale)(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumSum(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))(Data_Enum_Generic.genericBoundedEnumConstructor(Data_Enum_Generic.genericBoundedEnumNoArguments))))));
  var fromMaxScale = new MaxForLive_Conversions.FromMax(MaxForLive_Conversions.maxToEnum(simpleEnumScale));
  var defaultSpec = {
      scale: Kurd9.value,
      doum: {
          octave: 3,
          note: Backend_Note.C.value
      },
      root: {
          octave: 3,
          note: Backend_Note.C.value
      }
  };
  exports["defaultSpec"] = defaultSpec;
  exports["renderSpec"] = renderSpec;
  exports["fromMaxScale"] = fromMaxScale;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
})(PS);
(function(exports) {
  exports.getArgImpl = function(arguments, i) {
    if(i < arguments.length) {
      return arguments[i];
    } else {
      throw ( "getArgImpl: Argument "
            + i
            + " out of range ("
            + arguments.length
            + ")\n"
            );
    }
  }
})(PS["MaxForLive.Arguments"] = PS["MaxForLive.Arguments"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["MaxForLive.Arguments"] = $PS["MaxForLive.Arguments"] || {};
  var exports = $PS["MaxForLive.Arguments"];
  var $foreign = $PS["MaxForLive.Arguments"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var getArg = function (dictFromMax) {
      return function (xs) {
          var $5 = MaxForLive_Conversions.fromMax(dictFromMax);
          var $6 = Data_Function_Uncurried.runFn2($foreign.getArgImpl)(xs);
          return function ($7) {
              return $5($6($7));
          };
      };
  };
  exports["getArg"] = getArg;
})(PS);
(function(exports) {
   

  exports.setInlets = function(numInlets) {
    return function() {
      inlets = numInlets;
    }
  }

  exports.setOutlets = function(numOutlets) {
    return function() {
      outlets = numOutlets;
    }
  }

  exports.outletImpl = function(i, x) {
    outlet(i, x);
  }

  exports.setInletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setinletassist(inlet, assist);
      }
    }
  }
})(PS["MaxForLive.Global"] = PS["MaxForLive.Global"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["MaxForLive.Global"] = $PS["MaxForLive.Global"] || {};
  var exports = $PS["MaxForLive.Global"];
  var $foreign = $PS["MaxForLive.Global"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var outlet = function (dictToMax) {
      return function (i) {
          return function (x) {
              return function () {
                  return $foreign.outletImpl(i, MaxForLive_Conversions.toMax(dictToMax)(x));
              };
          };
      };
  };
  exports["outlet"] = outlet;
  exports["setInlets"] = $foreign.setInlets;
  exports["setOutlets"] = $foreign.setOutlets;
  exports["setInletAssist"] = $foreign.setInletAssist;
})(PS);
(function(exports) {
  exports.setHandlerImpl = function(inlet, message, handler) {
    if(messageHandlers[inlet] === undefined) {
      messageHandlers[inlet] = {};
    }

    messageHandlers[inlet][message] = handler;
  }
})(PS["MaxForLive.Handlers"] = PS["MaxForLive.Handlers"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["MaxForLive.Handlers"] = $PS["MaxForLive.Handlers"] || {};
  var exports = $PS["MaxForLive.Handlers"];
  var $foreign = $PS["MaxForLive.Handlers"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var MaxForLive_Arguments = $PS["MaxForLive.Arguments"];                
  var InvokeHandler = function (invokeHandler) {
      this.invokeHandler = invokeHandler;
  };
  var invokeNoArgs = new InvokeHandler(function (_i) {
      return Data_Function["const"];
  });
  var invokeHandler = function (dict) {
      return dict.invokeHandler;
  };
  var invokeWithArg = function (dictFromMax) {
      return function (dictInvokeHandler) {
          return new InvokeHandler(function (i) {
              return function (f) {
                  return function (xs) {
                      return invokeHandler(dictInvokeHandler)(i + 1 | 0)(f(MaxForLive_Arguments.getArg(dictFromMax)(xs)(i)))(xs);
                  };
              };
          });
      };
  };
  var setHandler = function (dictInvokeHandler) {
      return function (v) {
          return function () {
              return $foreign.setHandlerImpl(v.inlet, v.msg, Effect_Uncurried.mkEffectFn1(invokeHandler(dictInvokeHandler)(0)(v.handler)));
          };
      };
  };
  exports["setHandler"] = setHandler;
  exports["invokeNoArgs"] = invokeNoArgs;
  exports["invokeWithArg"] = invokeWithArg;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["ScaleSelector"] = $PS["ScaleSelector"] || {};
  var exports = $PS["ScaleSelector"];
  var Backend_Note = $PS["Backend.Note"];
  var Backend_Scale = $PS["Backend.Scale"];
  var Effect_Ref = $PS["Effect.Ref"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var MaxForLive_Global = $PS["MaxForLive.Global"];
  var MaxForLive_Handlers = $PS["MaxForLive.Handlers"];                
  var update = function (ref) {
      return function (f) {
          return function __do() {
              var newSpec = Effect_Ref.modify(f)(ref)();
              return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxList(Backend_Note.toMaxInOctave))(0)(Backend_Scale.renderSpec(newSpec))();
          };
      };
  };
  var setScale = function (ref) {
      return function (scale) {
          return update(ref)(function (v) {
              return {
                  scale: scale,
                  doum: v.doum,
                  root: v.root
              };
          });
      };
  };
  var setRoot = function (ref) {
      return function (root) {
          return update(ref)(function (v) {
              return {
                  scale: v.scale,
                  doum: v.doum,
                  root: root
              };
          });
      };
  };
  var setDoum = function (ref) {
      return function (doum) {
          return update(ref)(function (v) {
              return {
                  scale: v.scale,
                  doum: doum,
                  root: v.root
              };
          });
      };
  };
  var main = function __do() {
      MaxForLive_Global.setInlets(3)();
      MaxForLive_Global.setOutlets(1)();
      MaxForLive_Global.setInletAssist(0)("Scale")();
      MaxForLive_Global.setInletAssist(1)("Doum")();
      MaxForLive_Global.setInletAssist(2)("Root")();
      var ref = Effect_Ref["new"](Backend_Scale.defaultSpec)();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(Backend_Scale.fromMaxScale)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 0,
          msg: "msg_int",
          handler: setScale(ref)
      })();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(Backend_Note.fromMaxInOctave)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 1,
          msg: "msg_int",
          handler: setDoum(ref)
      })();
      return MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(Backend_Note.fromMaxInOctave)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 2,
          msg: "msg_int",
          handler: setRoot(ref)
      })();
  };
  exports["main"] = main;
})(PS);
PS["ScaleSelector"].main();
/* END */
