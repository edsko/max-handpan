/**
 * Functions that max expects to be present when the file is loaded
 */

/**
 * Registered message handlers
 *
 * @see anything
 */
var messageHandlers = {};

/**
 * Respond to messages
 *
 * Max expects <code>anything</code> to be present when the JavaScript is
 * loaded. We <i>can</i> override it later, but since it must be present, we
 * might as well make use of it. On the PureScript side, we will update
 * <code>messageHandlers</code>, and we will read it here.
 */
function anything() {
  if(messageHandlers[inlet] !== undefined && typeof(messageHandlers[inlet][messagename]) === 'function') {
    messageHandlers[inlet][messagename](arguments);
  } else {
    throw ("anything: Unexpected message " + messagename + " on inlet " + inlet + "\n");
  }
}
// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
})(PS);
(function(exports) {
  exports.getArgImpl = function(arguments, i) {
    if(i < arguments.length) {
      return arguments[i];
    } else {
      throw ( "getArgImpl: Argument "
            + i
            + " out of range ("
            + arguments.length
            + ")\n"
            );
    }
  }
})(PS["MaxForLive.Arguments"] = PS["MaxForLive.Arguments"] || {});
(function(exports) {
  exports.fromMaxIntImpl = function(x) {
    if(typeof(x) === 'number') {
      return x;
    } else {
      throw ( "fromMaxIntImpl: Argument "
            + x
            + " has unexpected type "
            + typeof(x)
            + " (expected Int)\n"
            );
    }
  }
})(PS["MaxForLive.Conversions"] = PS["MaxForLive.Conversions"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Conversions"] = $PS["MaxForLive.Conversions"] || {};
  var exports = $PS["MaxForLive.Conversions"];
  var $foreign = $PS["MaxForLive.Conversions"];
  var FromMax = function (fromMax) {
      this.fromMax = fromMax;
  };                                                          
  var fromMaxInt = new FromMax($foreign.fromMaxIntImpl);
  var fromMax = function (dict) {
      return dict.fromMax;
  };
  exports["fromMax"] = fromMax;
  exports["fromMaxInt"] = fromMaxInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Arguments"] = $PS["MaxForLive.Arguments"] || {};
  var exports = $PS["MaxForLive.Arguments"];
  var $foreign = $PS["MaxForLive.Arguments"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var getArg = function (dictFromMax) {
      return function (xs) {
          var $1 = MaxForLive_Conversions.fromMax(dictFromMax);
          var $2 = Data_Function_Uncurried.runFn2($foreign.getArgImpl)(xs);
          return function ($3) {
              return $1($2($3));
          };
      };
  };
  exports["getArg"] = getArg;
})(PS);
(function(exports) {
  /**
 * Instead of using <code>EffectFn</code>, we do the wrapping manually.
 * The reason is that Max's JavaScript environment is a little weird, and it
 * it treats <code>post</code> special; this works just fine:
 *
 * <code>
 * var fn = function(x) {
 *   post("This is some other function", x, "\n");
 * }
 *
 * var fnRenamed = fn;
 * fnRenamed(2);
 * </code>
 *
 * but this does not:
 *
 * <code>
 * var postRenamed = post;
 * postRenamed("bye\n");
 * </code>
 */  
  exports.post = function(msg) {
    return function() {
      if(typeof post === 'function')
        post(msg);
      else if(typeof console.log === 'function')
        console.log(msg);
    }
  }

  exports.setInlets = function(numInlets) {
    return function() {
      inlets = numInlets;
    }
  }

  exports.setOutlets = function(numOutlets) {
    return function() {
      outlets = numOutlets;
    }
  }

  exports.setInletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setinletassist(inlet, assist);
      }
    }
  }
})(PS["MaxForLive.Global"] = PS["MaxForLive.Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Global"] = $PS["MaxForLive.Global"] || {};
  var exports = $PS["MaxForLive.Global"];
  var $foreign = $PS["MaxForLive.Global"];                                   
  var postLn = function (str) {
      return $foreign.post(str + "\x0a");
  };
  exports["postLn"] = postLn;
  exports["setInlets"] = $foreign.setInlets;
  exports["setOutlets"] = $foreign.setOutlets;
  exports["setInletAssist"] = $foreign.setInletAssist;
})(PS);
(function(exports) {
  exports.setHandlerImpl = function(inlet, message, handler) {
    if(messageHandlers[inlet] === undefined) {
      messageHandlers[inlet] = {};
    }

    messageHandlers[inlet][message] = handler;
  }
})(PS["MaxForLive.Handlers"] = PS["MaxForLive.Handlers"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Handlers"] = $PS["MaxForLive.Handlers"] || {};
  var exports = $PS["MaxForLive.Handlers"];
  var $foreign = $PS["MaxForLive.Handlers"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var MaxForLive_Arguments = $PS["MaxForLive.Arguments"];                
  var InvokeHandler = function (invokeHandler) {
      this.invokeHandler = invokeHandler;
  };
  var invokeNoArgs = new InvokeHandler(function (_i) {
      return Data_Function["const"];
  });
  var invokeHandler = function (dict) {
      return dict.invokeHandler;
  };
  var invokeWithArg = function (dictFromMax) {
      return function (dictInvokeHandler) {
          return new InvokeHandler(function (i) {
              return function (f) {
                  return function (xs) {
                      return invokeHandler(dictInvokeHandler)(i + 1 | 0)(f(MaxForLive_Arguments.getArg(dictFromMax)(xs)(i)))(xs);
                  };
              };
          });
      };
  };
  var setHandler = function (dictInvokeHandler) {
      return function (v) {
          return function () {
              return $foreign.setHandlerImpl(v.inlet, v.msg, Effect_Uncurried.mkEffectFn1(invokeHandler(dictInvokeHandler)(0)(v.handler)));
          };
      };
  };
  exports["setHandler"] = setHandler;
  exports["invokeNoArgs"] = invokeNoArgs;
  exports["invokeWithArg"] = invokeWithArg;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["ScaleSelector"] = $PS["ScaleSelector"] || {};
  var exports = $PS["ScaleSelector"];
  var Data_Show = $PS["Data.Show"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var MaxForLive_Global = $PS["MaxForLive.Global"];
  var MaxForLive_Handlers = $PS["MaxForLive.Handlers"];                
  var setScale = function (scale) {
      return MaxForLive_Global.postLn("setScale " + Data_Show.show(Data_Show.showInt)(scale));
  };
  var setRoot = function (root) {
      return MaxForLive_Global.postLn("setRoot " + Data_Show.show(Data_Show.showInt)(root));
  };
  var setDoum = function (doum) {
      return MaxForLive_Global.postLn("setDoum " + Data_Show.show(Data_Show.showInt)(doum));
  };
  var main = function __do() {
      MaxForLive_Global.setInlets(3)();
      MaxForLive_Global.setOutlets(1)();
      MaxForLive_Global.setInletAssist(0)("Scale")();
      MaxForLive_Global.setInletAssist(1)("Root")();
      MaxForLive_Global.setInletAssist(2)("Doum")();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_Conversions.fromMaxInt)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 0,
          msg: "msg_int",
          handler: setScale
      })();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_Conversions.fromMaxInt)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 1,
          msg: "msg_int",
          handler: setRoot
      })();
      return MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_Conversions.fromMaxInt)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 2,
          msg: "msg_int",
          handler: setDoum
      })();
  };
  exports["main"] = main;
})(PS);
PS["ScaleSelector"].main();
/* END */
