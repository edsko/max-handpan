/**
 * Functions that max expects to be present when the file is loaded
 */

/**
 * Registered message handlers
 *
 * @see anything
 */
var messageHandlers = {};

/**
 * Respond to messages
 *
 * Max expects <code>anything</code> to be present when the JavaScript is
 * loaded. We <i>can</i> override it later, but since it must be present, we
 * might as well make use of it. On the PureScript side, we will update
 * <code>messageHandlers</code>, and we will read it here.
 */
function anything() {
  if(typeof(messageHandlers[inlet][messagename]) === 'function') {
    messageHandlers[inlet][messagename](arguments);
  } else {
    throw ("anything: Unexpected message " + messagename + "\n");
  }
}
// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  exports.new = function(path) {
    return function() {
      return new LiveAPI(null, path);
    }
  }

  exports.id = function(obj) {
    return obj.id;
  }

  exports.sameIdImpl = function(id1, id2) {
    return id1 === id2;
  }
})(PS["MaxForLive.LiveAPI"] = PS["MaxForLive.LiveAPI"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.LiveAPI"] = $PS["MaxForLive.LiveAPI"] || {};
  var exports = $PS["MaxForLive.LiveAPI"];
  var $foreign = $PS["MaxForLive.LiveAPI"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var view = function (dictHasView) {
      return function (v) {
          return v + " view";
      };
  };
  var thisDevice = "this_device";
  var selectedTrack = function (v) {
      return v + " selected_track";
  };
  var sameId = Data_Function_Uncurried.runFn2($foreign.sameIdImpl);
  var liveSet = "live_set";
  var canonicalParent = function (dictHasParent) {
      return function (v) {
          return v + " canonical_parent";
      };
  };
  var thisTrack = canonicalParent()(thisDevice);
  exports["view"] = view;
  exports["liveSet"] = liveSet;
  exports["selectedTrack"] = selectedTrack;
  exports["thisTrack"] = thisTrack;
  exports["sameId"] = sameId;
  exports["new"] = $foreign["new"];
  exports["id"] = $foreign.id;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["InspectSimpler"] = $PS["InspectSimpler"] || {};
  var exports = $PS["InspectSimpler"];
  var Data_Unit = $PS["Data.Unit"];
  var MaxForLive_LiveAPI = $PS["MaxForLive.LiveAPI"];                
  var main = function __do() {
      var ourTrack = MaxForLive_LiveAPI["new"](MaxForLive_LiveAPI.thisTrack)();
      var selected = MaxForLive_LiveAPI["new"](MaxForLive_LiveAPI.selectedTrack(MaxForLive_LiveAPI.view()(MaxForLive_LiveAPI.liveSet)))();
      var ourTrackSelected = MaxForLive_LiveAPI.sameId(MaxForLive_LiveAPI.id(ourTrack))(MaxForLive_LiveAPI.id(selected));
      return Data_Unit.unit;
  };
  exports["main"] = main;
})(PS);
PS["InspectSimpler"].main();
/* END */
