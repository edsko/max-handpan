/**
 * Functions that max expects to be present when the file is loaded
 */

/**
 * Registered message handlers
 *
 * @see anything
 */
var messageHandlers = {};

/**
 * Respond to messages
 *
 * Max expects <code>anything</code> to be present when the JavaScript is
 * loaded. We <i>can</i> override it later, but since it must be present, we
 * might as well make use of it. On the PureScript side, we will update
 * <code>messageHandlers</code>, and we will read it here.
 */
function anything() {
  if(messageHandlers[inlet] !== undefined && typeof(messageHandlers[inlet][messagename]) === 'function') {
    messageHandlers[inlet][messagename](arguments);
  } else {
    throw ("anything: Unexpected message " + messagename + " on inlet " + inlet + "\n");
  }
}
// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                       
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 207, column 28): " + [ v.constructor.name ]);
      });
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
})(PS);
(function(exports) {
  exports.getArgImpl = function(arguments, i) {
    if(i < arguments.length) {
      return arguments[i];
    } else {
      throw ( "getArgImpl: Argument "
            + i
            + " out of range ("
            + arguments.length
            + ")\n"
            );
    }
  }
})(PS["MaxForLive.Arguments"] = PS["MaxForLive.Arguments"] || {});
(function(exports) {
  exports.fromMaxIntImpl = function(x) {
    if(typeof(x) === 'number') {
      return x;
    } else {
      throw ( "fromMaxIntImpl: Argument "
            + x
            + " has unexpected type "
            + typeof(x)
            + " (expected Int)\n"
            );
    }
  }
})(PS["MaxForLive.Conversions"] = PS["MaxForLive.Conversions"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Conversions"] = $PS["MaxForLive.Conversions"] || {};
  var exports = $PS["MaxForLive.Conversions"];
  var $foreign = $PS["MaxForLive.Conversions"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ToMax = function (toMax) {
      this.toMax = toMax;
  };
  var FromMax = function (fromMax) {
      this.fromMax = fromMax;
  };
  var toMaxString = new ToMax(Unsafe_Coerce.unsafeCoerce);
  var toMax = function (dict) {
      return dict.toMax;
  };                                                          
  var fromMaxInt = new FromMax($foreign.fromMaxIntImpl);
  var fromMax = function (dict) {
      return dict.fromMax;
  };
  exports["FromMax"] = FromMax;
  exports["fromMax"] = fromMax;
  exports["ToMax"] = ToMax;
  exports["toMax"] = toMax;
  exports["fromMaxInt"] = fromMaxInt;
  exports["toMaxString"] = toMaxString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Arguments"] = $PS["MaxForLive.Arguments"] || {};
  var exports = $PS["MaxForLive.Arguments"];
  var $foreign = $PS["MaxForLive.Arguments"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var getArg = function (dictFromMax) {
      return function (xs) {
          var $1 = MaxForLive_Conversions.fromMax(dictFromMax);
          var $2 = Data_Function_Uncurried.runFn2($foreign.getArgImpl)(xs);
          return function ($3) {
              return $1($2($3));
          };
      };
  };
  exports["getArg"] = getArg;
})(PS);
(function(exports) {
  /**
 * Instead of using <code>EffectFn</code>, we do the wrapping manually.
 * The reason is that Max's JavaScript environment is a little weird, and it
 * it treats <code>post</code> special; this works just fine:
 *
 * <code>
 * var fn = function(x) {
 *   post("This is some other function", x, "\n");
 * }
 *
 * var fnRenamed = fn;
 * fnRenamed(2);
 * </code>
 *
 * but this does not:
 *
 * <code>
 * var postRenamed = post;
 * postRenamed("bye\n");
 * </code>
 */  
  exports.post = function(msg) {
    return function() {
      if(typeof post === 'function')
        post(msg);
      else if(typeof console.log === 'function')
        console.log(msg);
    }
  }

  exports.setInlets = function(numInlets) {
    return function() {
      inlets = numInlets;
    }
  }

  exports.setOutlets = function(numOutlets) {
    return function() {
      outlets = numOutlets;
    }
  }

  exports.outletImpl = function(i, x) {
    outlet(i, x);
  }

  exports.setInletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setinletassist(inlet, assist);
      }
    }
  }

  exports.setOutletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setoutletassist(inlet, assist);
      }
    }
  }
})(PS["MaxForLive.Global"] = PS["MaxForLive.Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Global"] = $PS["MaxForLive.Global"] || {};
  var exports = $PS["MaxForLive.Global"];
  var $foreign = $PS["MaxForLive.Global"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var postLn = function (str) {
      return $foreign.post(str + "\x0a");
  };
  var outlet = function (dictToMax) {
      return function (i) {
          return function (x) {
              return function () {
                  return $foreign.outletImpl(i, MaxForLive_Conversions.toMax(dictToMax)(x));
              };
          };
      };
  };
  exports["postLn"] = postLn;
  exports["outlet"] = outlet;
  exports["setInlets"] = $foreign.setInlets;
  exports["setOutlets"] = $foreign.setOutlets;
  exports["setInletAssist"] = $foreign.setInletAssist;
  exports["setOutletAssist"] = $foreign.setOutletAssist;
})(PS);
(function(exports) {
  exports.setHandlerImpl = function(inlet, message, handler) {
    if(messageHandlers[inlet] === undefined) {
      messageHandlers[inlet] = {};
    }

    messageHandlers[inlet][message] = handler;
  }
})(PS["MaxForLive.Handlers"] = PS["MaxForLive.Handlers"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Handlers"] = $PS["MaxForLive.Handlers"] || {};
  var exports = $PS["MaxForLive.Handlers"];
  var $foreign = $PS["MaxForLive.Handlers"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var MaxForLive_Arguments = $PS["MaxForLive.Arguments"];                
  var InvokeHandler = function (invokeHandler) {
      this.invokeHandler = invokeHandler;
  };
  var invokeNoArgs = new InvokeHandler(function (_i) {
      return Data_Function["const"];
  });
  var invokeHandler = function (dict) {
      return dict.invokeHandler;
  };
  var invokeWithArg = function (dictFromMax) {
      return function (dictInvokeHandler) {
          return new InvokeHandler(function (i) {
              return function (f) {
                  return function (xs) {
                      return invokeHandler(dictInvokeHandler)(i + 1 | 0)(f(MaxForLive_Arguments.getArg(dictFromMax)(xs)(i)))(xs);
                  };
              };
          });
      };
  };
  var setHandler = function (dictInvokeHandler) {
      return function (v) {
          return function () {
              return $foreign.setHandlerImpl(v.inlet, v.msg, Effect_Uncurried.mkEffectFn1(invokeHandler(dictInvokeHandler)(0)(v.handler)));
          };
      };
  };
  exports["setHandler"] = setHandler;
  exports["invokeNoArgs"] = invokeNoArgs;
  exports["invokeWithArg"] = invokeWithArg;
})(PS);
(function(exports) {
  exports.withPath = function(path) {
    return function() {
      return new LiveAPI(null, path);
    }
  }

  exports.deviceTrack = function(path) {
    return function() {
      var parentObj  = null;
      var parentPath = path;

      var i = 0;

      do {
        parentPath = parentPath + " canonical_parent";
        parentObj  = new LiveAPI(null, parentPath);
      } while(parentObj.type !== 'Track' && parentObj.id != 0);

      return parentObj;
    }
  }

  exports.id = function(obj) {
    var id = obj.id;

    if(typeof(id) === 'string') {
      // For some reason, IDs are returned as strings 🤦‍♂️
      return parseInt(id);
    } else if(typeof(id) === 'number') {
      return id;
    } else {
      error("id: unexpected ID", id, "of type", typeof(id), "\n");
    }
  }

  exports.objectType = function(obj) {
    return obj.type;
  }

  exports.unquotedPath = function(obj) {
    return obj.unquotedpath;
  }

  exports.idFromMax = function(id) {
    if(typeof(id) === 'number') {
      return id;
    } else {
      error("idFromMax: unexpected ID", id, "of type", typeof(id), "\n");
    }
  }
})(PS["MaxForLive.LiveAPI"] = PS["MaxForLive.LiveAPI"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.LiveAPI"] = $PS["MaxForLive.LiveAPI"] || {};
  var exports = $PS["MaxForLive.LiveAPI"];
  var $foreign = $PS["MaxForLive.LiveAPI"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Show = $PS["Data.Show"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var view = function (dictHasView) {
      return function (v) {
          return v + " view";
      };
  };
  var toMaxPath = new MaxForLive_Conversions.ToMax(Unsafe_Coerce.unsafeCoerce);
  var thisDevice = "this_device";
  var showPath = new Data_Show.Show(function (v) {
      return v;
  });
  var showId = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showInt)(v);
  });
  var selectedTrack = function (v) {
      return v + " selected_track";
  };
  var sameId = function (v) {
      return function (v1) {
          return v === v1;
      };
  };
  var liveSet = "live_set";
  var fromMaxId = new MaxForLive_Conversions.FromMax($foreign.idFromMax);
  var eqId = new Data_Eq.Eq(sameId);
  exports["view"] = view;
  exports["liveSet"] = liveSet;
  exports["selectedTrack"] = selectedTrack;
  exports["thisDevice"] = thisDevice;
  exports["sameId"] = sameId;
  exports["showPath"] = showPath;
  exports["toMaxPath"] = toMaxPath;
  exports["eqId"] = eqId;
  exports["showId"] = showId;
  exports["fromMaxId"] = fromMaxId;
  exports["withPath"] = $foreign.withPath;
  exports["id"] = $foreign.id;
  exports["objectType"] = $foreign.objectType;
  exports["unquotedPath"] = $foreign.unquotedPath;
  exports["deviceTrack"] = $foreign.deviceTrack;
})(PS);
(function(exports) {
  exports.mkMaxMessage = function(msg, payload) {
    // If the payload is an array, insert the message at the front
    // This is the format that `route` and co expect
    if(Array.isArray(payload)) {
      return [msg].concat(payload);
    } else {
      return [msg, payload];
    }
  }
})(PS["MaxForLive.Message"] = PS["MaxForLive.Message"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Message"] = $PS["MaxForLive.Message"] || {};
  var exports = $PS["MaxForLive.Message"];
  var $foreign = $PS["MaxForLive.Message"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var Message = (function () {
      function Message(value0) {
          this.value0 = value0;
      };
      Message.create = function (value0) {
          return new Message(value0);
      };
      return Message;
  })();
  var toMaxMessage = function (dictToMax) {
      return new MaxForLive_Conversions.ToMax(function (v) {
          return $foreign.mkMaxMessage(v.value0.messageName, MaxForLive_Conversions.toMax(dictToMax)(v.value0.messagePayload));
      });
  };
  exports["Message"] = Message;
  exports["toMaxMessage"] = toMaxMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["TrackSelected.State"] = $PS["TrackSelected.State"] || {};
  var exports = $PS["TrackSelected.State"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Symbol = $PS["Data.Symbol"];
  var MaxForLive_LiveAPI = $PS["MaxForLive.LiveAPI"];                
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var showState = new Data_Show.Show(function (v) {
      return Data_Show.show(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
          return "ourId";
      }))(Data_Show.showRecordFieldsNil)(Data_Maybe.showMaybe(MaxForLive_LiveAPI.showId))))(v.value0);
  });
  var defaultState = new State({
      ourId: Data_Maybe.Nothing.value
  });
  exports["State"] = State;
  exports["defaultState"] = defaultState;
  exports["showState"] = showState;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["TrackSelected"] = $PS["TrackSelected"] || {};
  var exports = $PS["TrackSelected"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var MaxForLive_Global = $PS["MaxForLive.Global"];
  var MaxForLive_Handlers = $PS["MaxForLive.Handlers"];
  var MaxForLive_LiveAPI = $PS["MaxForLive.LiveAPI"];
  var MaxForLive_Message = $PS["MaxForLive.Message"];
  var TrackSelected_State = $PS["TrackSelected.State"];                
  var toggleEnabled = function (stVar) {
      return function (enabled) {
          return MaxForLive_Global.postLn("toggleEnabled: " + Data_Show.show(Data_Show.showInt)(enabled));
      };
  };
  var setSelectedId = function (stVar) {
      return function (selected) {
          return MaxForLive_Global.postLn("setSelectedId: " + Data_Show.show(Data_Show.showInt)(selected));
      };
  };
  var init = function (stVar) {
      return function __do() {
          var us = MaxForLive_LiveAPI.withPath(MaxForLive_LiveAPI.thisDevice)();
          MaxForLive_Global.postLn("us: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(us)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(us)) + (", " + (Data_Show.show(MaxForLive_LiveAPI.showId)(MaxForLive_LiveAPI.id(us)) + ")"))))))();
          var ourTrack = MaxForLive_LiveAPI.deviceTrack(MaxForLive_LiveAPI.thisDevice)();
          MaxForLive_Global.postLn("ourTrack: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(ourTrack)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(ourTrack)) + ")"))))();
          var selected = MaxForLive_LiveAPI.withPath(MaxForLive_LiveAPI.selectedTrack(MaxForLive_LiveAPI.view()(MaxForLive_LiveAPI.liveSet)))();
          MaxForLive_Global.postLn("selected: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(selected)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(selected)) + ")"))))();
          var newState = new TrackSelected_State.State({
              ourId: new Data_Maybe.Just(MaxForLive_LiveAPI.id(us))
          });
          MaxForLive_Global.postLn("newState: " + Data_Show.show(TrackSelected_State.showState)(newState))();
          Effect_Ref.write(newState)(stVar)();
          (function () {
              var $1 = MaxForLive_LiveAPI.sameId(MaxForLive_LiveAPI.id(ourTrack))(MaxForLive_LiveAPI.id(selected));
              if ($1) {
                  return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxString)(0)("selected")();
              };
              return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxString)(0)("deselected")();
          })();
          return MaxForLive_Global.outlet(MaxForLive_Message.toMaxMessage(MaxForLive_LiveAPI.toMaxPath))(1)(new MaxForLive_Message.Message({
              messageName: "path",
              messagePayload: MaxForLive_LiveAPI.unquotedPath(us)
          }))();
      };
  };
  var setDeviceId = function (stVar) {
      return function (deviceId) {
          return function __do() {
              var v = Effect_Ref.read(stVar)();
              var $3 = Data_Eq.notEq(Data_Maybe.eqMaybe(MaxForLive_LiveAPI.eqId))(v.value0.ourId)(new Data_Maybe.Just(deviceId));
              if ($3) {
                  return init(stVar)();
              };
              return Data_Unit.unit;
          };
      };
  };
  var main = function __do() {
      MaxForLive_Global.setInlets(4)();
      MaxForLive_Global.setOutlets(2)();
      MaxForLive_Global.setInletAssist(0)("Bang to (re)initialise")();
      MaxForLive_Global.setInletAssist(1)("Device enabled/disabled (from live.thisdevice)")();
      MaxForLive_Global.setInletAssist(2)("ID of selected track")();
      MaxForLive_Global.setInletAssist(3)("ID of device at our path")();
      MaxForLive_Global.setOutletAssist(0)("'selected' or 'deselected'")();
      MaxForLive_Global.setOutletAssist(1)("Device path (on init and when device moved)")();
      var stVar = Effect_Ref["new"](TrackSelected_State.defaultState)();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeNoArgs)({
          inlet: 0,
          msg: "bang",
          handler: init(stVar)
      })();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_Conversions.fromMaxInt)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 1,
          msg: "msg_int",
          handler: toggleEnabled(stVar)
      })();
      MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_Conversions.fromMaxInt)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 2,
          msg: "id",
          handler: setSelectedId(stVar)
      })();
      return MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeWithArg(MaxForLive_LiveAPI.fromMaxId)(MaxForLive_Handlers.invokeNoArgs))({
          inlet: 3,
          msg: "id",
          handler: setDeviceId(stVar)
      })();
  };
  exports["main"] = main;
})(PS);
PS["TrackSelected"].main();
/* END */
