/**
 * Functions that max expects to be present when the file is loaded
 */

/**
 * Registered message handlers
 *
 * @see anything
 */
var messageHandlers = {};

/**
 * Respond to messages
 *
 * Max expects <code>anything</code> to be present when the JavaScript is
 * loaded. We <i>can</i> override it later, but since it must be present, we
 * might as well make use of it. On the PureScript side, we will update
 * <code>messageHandlers</code>, and we will read it here.
 */
function anything() {
  if(messageHandlers[inlet] !== undefined && typeof(messageHandlers[inlet][messagename]) === 'function') {
    messageHandlers[inlet][messagename](arguments);
  } else {
    throw ("anything: Unexpected message " + messagename + " on inlet " + inlet + "\n");
  }
}
// Generated by purs bundle 0.13.8
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showString"] = showString;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Conversions"] = $PS["MaxForLive.Conversions"] || {};
  var exports = $PS["MaxForLive.Conversions"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var ToMax = function (toMax) {
      this.toMax = toMax;
  };
  var toMaxString = new ToMax(Unsafe_Coerce.unsafeCoerce);                              
  var toMaxInt = new ToMax(Unsafe_Coerce.unsafeCoerce);
  var toMax = function (dict) {
      return dict.toMax;
  };
  exports["ToMax"] = ToMax;
  exports["toMax"] = toMax;
  exports["toMaxInt"] = toMaxInt;
  exports["toMaxString"] = toMaxString;
})(PS);
(function(exports) {
  /**
 * Instead of using <code>EffectFn</code>, we do the wrapping manually.
 * The reason is that Max's JavaScript environment is a little weird, and it
 * it treats <code>post</code> special; this works just fine:
 *
 * <code>
 * var fn = function(x) {
 *   post("This is some other function", x, "\n");
 * }
 *
 * var fnRenamed = fn;
 * fnRenamed(2);
 * </code>
 *
 * but this does not:
 *
 * <code>
 * var postRenamed = post;
 * postRenamed("bye\n");
 * </code>
 */  
  exports.post = function(msg) {
    return function() {
      if(typeof post === 'function')
        post(msg);
      else if(typeof console.log === 'function')
        console.log(msg);
    }
  }

  exports.setInlets = function(numInlets) {
    return function() {
      inlets = numInlets;
    }
  }

  exports.setOutlets = function(numOutlets) {
    return function() {
      outlets = numOutlets;
    }
  }

  exports.outletImpl = function(i, x) {
    outlet(i, x);
  }

  exports.setInletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setinletassist(inlet, assist);
      }
    }
  }

  exports.setOutletAssist = function(inlet) {
    return function(assist) {
      return function() {
        setoutletassist(inlet, assist);
      }
    }
  }
})(PS["MaxForLive.Global"] = PS["MaxForLive.Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Global"] = $PS["MaxForLive.Global"] || {};
  var exports = $PS["MaxForLive.Global"];
  var $foreign = $PS["MaxForLive.Global"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var postLn = function (str) {
      return $foreign.post(str + "\x0a");
  };
  var outlet = function (dictToMax) {
      return function (i) {
          return function (x) {
              return function () {
                  return $foreign.outletImpl(i, MaxForLive_Conversions.toMax(dictToMax)(x));
              };
          };
      };
  };
  exports["postLn"] = postLn;
  exports["outlet"] = outlet;
  exports["setInlets"] = $foreign.setInlets;
  exports["setOutlets"] = $foreign.setOutlets;
  exports["setInletAssist"] = $foreign.setInletAssist;
  exports["setOutletAssist"] = $foreign.setOutletAssist;
})(PS);
(function(exports) {
  exports.setHandlerImpl = function(inlet, message, handler) {
    if(messageHandlers[inlet] === undefined) {
      messageHandlers[inlet] = {};
    }

    messageHandlers[inlet][message] = handler;
  }
})(PS["MaxForLive.Handlers"] = PS["MaxForLive.Handlers"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Handlers"] = $PS["MaxForLive.Handlers"] || {};
  var exports = $PS["MaxForLive.Handlers"];
  var $foreign = $PS["MaxForLive.Handlers"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];                        
  var InvokeHandler = function (invokeHandler) {
      this.invokeHandler = invokeHandler;
  };
  var invokeNoArgs = new InvokeHandler(function (_i) {
      return Data_Function["const"];
  });
  var invokeHandler = function (dict) {
      return dict.invokeHandler;
  };
  var setHandler = function (dictInvokeHandler) {
      return function (v) {
          return function () {
              return $foreign.setHandlerImpl(v.inlet, v.msg, Effect_Uncurried.mkEffectFn1(invokeHandler(dictInvokeHandler)(0)(v.handler)));
          };
      };
  };
  exports["setHandler"] = setHandler;
  exports["invokeNoArgs"] = invokeNoArgs;
})(PS);
(function(exports) {
  exports.withPath = function(path) {
    return function() {
      return new LiveAPI(null, path);
    }
  }

  exports.deviceTrack = function(path) {
    return function() {
      var parentObj  = null;
      var parentPath = path;

      var i = 0;

      do {
        parentPath = parentPath + " canonical_parent";
        parentObj  = new LiveAPI(null, parentPath);
      } while(parentObj.type !== 'Track' && parentObj.id != 0);

      return parentObj;
    }
  }

  exports.id = function(obj) {
    return obj.id;
  }

  exports.objectType = function(obj) {
    return obj.type;
  }

  exports.sameIdImpl = function(id1, id2) {
    return id1 === id2;
  }

  exports.unquotedPath = function(obj) {
    return obj.unquotedpath;
  }
})(PS["MaxForLive.LiveAPI"] = PS["MaxForLive.LiveAPI"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.LiveAPI"] = $PS["MaxForLive.LiveAPI"] || {};
  var exports = $PS["MaxForLive.LiveAPI"];
  var $foreign = $PS["MaxForLive.LiveAPI"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Show = $PS["Data.Show"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var view = function (dictHasView) {
      return function (v) {
          return v + " view";
      };
  };
  var toMaxPath = new MaxForLive_Conversions.ToMax(Unsafe_Coerce.unsafeCoerce);
  var thisDevice = "this_device";
  var showPath = new Data_Show.Show(function (v) {
      return v;
  });                                                  
  var selectedTrack = function (v) {
      return v + " selected_track";
  };
  var sameId = Data_Function_Uncurried.runFn2($foreign.sameIdImpl);
  var liveSet = "live_set";
  exports["view"] = view;
  exports["liveSet"] = liveSet;
  exports["selectedTrack"] = selectedTrack;
  exports["thisDevice"] = thisDevice;
  exports["sameId"] = sameId;
  exports["showPath"] = showPath;
  exports["toMaxPath"] = toMaxPath;
  exports["withPath"] = $foreign.withPath;
  exports["id"] = $foreign.id;
  exports["objectType"] = $foreign.objectType;
  exports["unquotedPath"] = $foreign.unquotedPath;
  exports["deviceTrack"] = $foreign.deviceTrack;
})(PS);
(function(exports) {
  exports.mkMaxMessage = function(msg, payload) {
    // If the payload is an array, insert the message at the front
    // This is the format that `route` and co expect
    if(Array.isArray(payload)) {
      return [msg].concat(payload);
    } else {
      return [msg, payload];
    }
  }
})(PS["MaxForLive.Message"] = PS["MaxForLive.Message"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["MaxForLive.Message"] = $PS["MaxForLive.Message"] || {};
  var exports = $PS["MaxForLive.Message"];
  var $foreign = $PS["MaxForLive.Message"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];                
  var Message = (function () {
      function Message(value0) {
          this.value0 = value0;
      };
      Message.create = function (value0) {
          return new Message(value0);
      };
      return Message;
  })();
  var toMaxMessage = function (dictToMax) {
      return new MaxForLive_Conversions.ToMax(function (v) {
          return $foreign.mkMaxMessage(v.value0.messageName, MaxForLive_Conversions.toMax(dictToMax)(v.value0.messagePayload));
      });
  };
  exports["Message"] = Message;
  exports["toMaxMessage"] = toMaxMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["TrackSelected"] = $PS["TrackSelected"] || {};
  var exports = $PS["TrackSelected"];
  var Data_Show = $PS["Data.Show"];
  var MaxForLive_Conversions = $PS["MaxForLive.Conversions"];
  var MaxForLive_Global = $PS["MaxForLive.Global"];
  var MaxForLive_Handlers = $PS["MaxForLive.Handlers"];
  var MaxForLive_LiveAPI = $PS["MaxForLive.LiveAPI"];
  var MaxForLive_Message = $PS["MaxForLive.Message"];                
  var init = function __do() {
      var us = MaxForLive_LiveAPI.withPath(MaxForLive_LiveAPI.thisDevice)();
      MaxForLive_Global.postLn("us: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(us)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(us)) + ")"))))();
      var ourTrack = MaxForLive_LiveAPI.deviceTrack(MaxForLive_LiveAPI.thisDevice)();
      MaxForLive_Global.postLn("ourTrack: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(ourTrack)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(ourTrack)) + ")"))))();
      var selected = MaxForLive_LiveAPI.withPath(MaxForLive_LiveAPI.selectedTrack(MaxForLive_LiveAPI.view()(MaxForLive_LiveAPI.liveSet)))();
      MaxForLive_Global.postLn("selected: " + (Data_Show.show(MaxForLive_LiveAPI.showPath)(MaxForLive_LiveAPI.unquotedPath(selected)) + (" (" + (Data_Show.show(Data_Show.showString)(MaxForLive_LiveAPI.objectType(selected)) + ")"))))();
      (function () {
          var $0 = MaxForLive_LiveAPI.sameId(MaxForLive_LiveAPI.id(ourTrack))(MaxForLive_LiveAPI.id(selected));
          if ($0) {
              return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxString)(0)("selected")();
          };
          return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxString)(0)("deselected")();
      })();
      MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxInt)(2)(0)();
      MaxForLive_Global.outlet(MaxForLive_Message.toMaxMessage(MaxForLive_LiveAPI.toMaxPath))(1)(new MaxForLive_Message.Message({
          messageName: "path",
          messagePayload: MaxForLive_LiveAPI.unquotedPath(us)
      }))();
      return MaxForLive_Global.outlet(MaxForLive_Conversions.toMaxInt)(2)(1)();
  };
  var main = function __do() {
      MaxForLive_Global.setInlets(3)();
      MaxForLive_Global.setOutlets(3)();
      MaxForLive_Global.setInletAssist(0)("Bang to (re)initialise")();
      MaxForLive_Global.setInletAssist(1)("Device enabled/disabled (from live.thisdevice)")();
      MaxForLive_Global.setOutletAssist(0)("'selected' or 'deselected'")();
      return MaxForLive_Handlers.setHandler(MaxForLive_Handlers.invokeNoArgs)({
          inlet: 0,
          msg: "bang",
          handler: init
      })();
  };
  exports["main"] = main;
})(PS);
PS["TrackSelected"].main();
/* END */
